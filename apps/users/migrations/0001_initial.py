# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2019-08-21 11:23
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('store', '0001_initial'),
        ('points_mall', '0001_initial'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SysUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('save_num', models.IntegerField(default=0, verbose_name='管理员信息保存次数')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '系统管理员',
                'verbose_name_plural': '系统管理员',
                'db_table': 'sysuser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PointsRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('point', models.BigIntegerField(blank=True, null=True, verbose_name='用户积分')),
                ('used', models.BigIntegerField(blank=True, null=True, verbose_name='使用')),
                ('expire', models.IntegerField(blank=True, null=True, verbose_name='过期时间')),
                ('status', models.IntegerField(choices=[(0, '已过期'), (1, '未过期')])),
                ('point_oder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='points_mall.PointOrder', verbose_name='积分订单')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='points_mall.TaskManage', verbose_name='积分任务来源')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='store.StoreManage', verbose_name='商店')),
            ],
            options={
                'verbose_name': '积分',
                'verbose_name_plural': '积分',
                'db_table': 'pointsrecord',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('username', models.CharField(blank=True, max_length=100, null=True, verbose_name='用户的姓名')),
                ('head_img', models.ImageField(blank=True, null=True, upload_to='head_img', verbose_name='用户头像')),
                ('phone', models.CharField(max_length=11, verbose_name='用户手机号')),
                ('balance', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='用户余额')),
                ('public_openid', models.CharField(blank=True, max_length=100, null=True, verbose_name='对公众号的唯一openid')),
                ('small_opneid', models.CharField(blank=True, max_length=100, null=True, verbose_name='小程序openid')),
                ('unionid', models.CharField(blank=True, max_length=100, null=True, verbose_name='unionid')),
                ('all_point', models.BigIntegerField(blank=True, null=True, verbose_name='用户总积分')),
            ],
            options={
                'verbose_name': '微信用户',
                'verbose_name_plural': '微信用户',
                'db_table': 'user',
            },
        ),
        migrations.AddField(
            model_name='pointsrecord',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pointsrecord', to='users.User', verbose_name='用户'),
        ),
        migrations.CreateModel(
            name='ShopUser',
            fields=[
            ],
            options={
                'verbose_name': '商家用户',
                'verbose_name_plural': '商家用户',
                'db_table': 'shopuser',
                'proxy': True,
                'indexes': [],
            },
            bases=('users.user',),
        ),
    ]
